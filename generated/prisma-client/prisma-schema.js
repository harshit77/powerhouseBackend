module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.3). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateMember {
  count: Int!
}

type AggregateNotification {
  count: Int!
}

type AggregatePackage {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Member {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  gender: String!
  phoneNumber: String!
  alternateNumber: String!
  DOB: DateTime
  package(where: PackageWhereInput, orderBy: PackageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Package!]
  createdAt: DateTime
  updatedAt: DateTime
  recommanded(where: MemberWhereInput, orderBy: MemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Member!]
  address: String!
  status: Status!
}

type MemberConnection {
  pageInfo: PageInfo!
  edges: [MemberEdge]!
  aggregate: AggregateMember!
}

input MemberCreateInput {
  id: ID
  firstName: String!
  lastName: String!
  email: String!
  gender: String!
  phoneNumber: String!
  alternateNumber: String!
  DOB: DateTime
  package: PackageCreateManyWithoutMemberShipIdInput
  recommanded: MemberCreateManyInput
  address: String!
  status: Status
}

input MemberCreateManyInput {
  create: [MemberCreateInput!]
  connect: [MemberWhereUniqueInput!]
}

input MemberCreateOneWithoutPackageInput {
  create: MemberCreateWithoutPackageInput
  connect: MemberWhereUniqueInput
}

input MemberCreateWithoutPackageInput {
  id: ID
  firstName: String!
  lastName: String!
  email: String!
  gender: String!
  phoneNumber: String!
  alternateNumber: String!
  DOB: DateTime
  recommanded: MemberCreateManyInput
  address: String!
  status: Status
}

type MemberEdge {
  node: Member!
  cursor: String!
}

enum MemberOrderByInput {
  id_ASC
  id_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  email_ASC
  email_DESC
  gender_ASC
  gender_DESC
  phoneNumber_ASC
  phoneNumber_DESC
  alternateNumber_ASC
  alternateNumber_DESC
  DOB_ASC
  DOB_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  address_ASC
  address_DESC
  status_ASC
  status_DESC
}

type MemberPreviousValues {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  gender: String!
  phoneNumber: String!
  alternateNumber: String!
  DOB: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  address: String!
  status: Status!
}

input MemberScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  gender: String
  gender_not: String
  gender_in: [String!]
  gender_not_in: [String!]
  gender_lt: String
  gender_lte: String
  gender_gt: String
  gender_gte: String
  gender_contains: String
  gender_not_contains: String
  gender_starts_with: String
  gender_not_starts_with: String
  gender_ends_with: String
  gender_not_ends_with: String
  phoneNumber: String
  phoneNumber_not: String
  phoneNumber_in: [String!]
  phoneNumber_not_in: [String!]
  phoneNumber_lt: String
  phoneNumber_lte: String
  phoneNumber_gt: String
  phoneNumber_gte: String
  phoneNumber_contains: String
  phoneNumber_not_contains: String
  phoneNumber_starts_with: String
  phoneNumber_not_starts_with: String
  phoneNumber_ends_with: String
  phoneNumber_not_ends_with: String
  alternateNumber: String
  alternateNumber_not: String
  alternateNumber_in: [String!]
  alternateNumber_not_in: [String!]
  alternateNumber_lt: String
  alternateNumber_lte: String
  alternateNumber_gt: String
  alternateNumber_gte: String
  alternateNumber_contains: String
  alternateNumber_not_contains: String
  alternateNumber_starts_with: String
  alternateNumber_not_starts_with: String
  alternateNumber_ends_with: String
  alternateNumber_not_ends_with: String
  DOB: DateTime
  DOB_not: DateTime
  DOB_in: [DateTime!]
  DOB_not_in: [DateTime!]
  DOB_lt: DateTime
  DOB_lte: DateTime
  DOB_gt: DateTime
  DOB_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  status: Status
  status_not: Status
  status_in: [Status!]
  status_not_in: [Status!]
  AND: [MemberScalarWhereInput!]
  OR: [MemberScalarWhereInput!]
  NOT: [MemberScalarWhereInput!]
}

type MemberSubscriptionPayload {
  mutation: MutationType!
  node: Member
  updatedFields: [String!]
  previousValues: MemberPreviousValues
}

input MemberSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MemberWhereInput
  AND: [MemberSubscriptionWhereInput!]
  OR: [MemberSubscriptionWhereInput!]
  NOT: [MemberSubscriptionWhereInput!]
}

input MemberUpdateDataInput {
  firstName: String
  lastName: String
  email: String
  gender: String
  phoneNumber: String
  alternateNumber: String
  DOB: DateTime
  package: PackageUpdateManyWithoutMemberShipIdInput
  recommanded: MemberUpdateManyInput
  address: String
  status: Status
}

input MemberUpdateInput {
  firstName: String
  lastName: String
  email: String
  gender: String
  phoneNumber: String
  alternateNumber: String
  DOB: DateTime
  package: PackageUpdateManyWithoutMemberShipIdInput
  recommanded: MemberUpdateManyInput
  address: String
  status: Status
}

input MemberUpdateManyDataInput {
  firstName: String
  lastName: String
  email: String
  gender: String
  phoneNumber: String
  alternateNumber: String
  DOB: DateTime
  address: String
  status: Status
}

input MemberUpdateManyInput {
  create: [MemberCreateInput!]
  update: [MemberUpdateWithWhereUniqueNestedInput!]
  upsert: [MemberUpsertWithWhereUniqueNestedInput!]
  delete: [MemberWhereUniqueInput!]
  connect: [MemberWhereUniqueInput!]
  set: [MemberWhereUniqueInput!]
  disconnect: [MemberWhereUniqueInput!]
  deleteMany: [MemberScalarWhereInput!]
  updateMany: [MemberUpdateManyWithWhereNestedInput!]
}

input MemberUpdateManyMutationInput {
  firstName: String
  lastName: String
  email: String
  gender: String
  phoneNumber: String
  alternateNumber: String
  DOB: DateTime
  address: String
  status: Status
}

input MemberUpdateManyWithWhereNestedInput {
  where: MemberScalarWhereInput!
  data: MemberUpdateManyDataInput!
}

input MemberUpdateOneWithoutPackageInput {
  create: MemberCreateWithoutPackageInput
  update: MemberUpdateWithoutPackageDataInput
  upsert: MemberUpsertWithoutPackageInput
  delete: Boolean
  disconnect: Boolean
  connect: MemberWhereUniqueInput
}

input MemberUpdateWithoutPackageDataInput {
  firstName: String
  lastName: String
  email: String
  gender: String
  phoneNumber: String
  alternateNumber: String
  DOB: DateTime
  recommanded: MemberUpdateManyInput
  address: String
  status: Status
}

input MemberUpdateWithWhereUniqueNestedInput {
  where: MemberWhereUniqueInput!
  data: MemberUpdateDataInput!
}

input MemberUpsertWithoutPackageInput {
  update: MemberUpdateWithoutPackageDataInput!
  create: MemberCreateWithoutPackageInput!
}

input MemberUpsertWithWhereUniqueNestedInput {
  where: MemberWhereUniqueInput!
  update: MemberUpdateDataInput!
  create: MemberCreateInput!
}

input MemberWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  gender: String
  gender_not: String
  gender_in: [String!]
  gender_not_in: [String!]
  gender_lt: String
  gender_lte: String
  gender_gt: String
  gender_gte: String
  gender_contains: String
  gender_not_contains: String
  gender_starts_with: String
  gender_not_starts_with: String
  gender_ends_with: String
  gender_not_ends_with: String
  phoneNumber: String
  phoneNumber_not: String
  phoneNumber_in: [String!]
  phoneNumber_not_in: [String!]
  phoneNumber_lt: String
  phoneNumber_lte: String
  phoneNumber_gt: String
  phoneNumber_gte: String
  phoneNumber_contains: String
  phoneNumber_not_contains: String
  phoneNumber_starts_with: String
  phoneNumber_not_starts_with: String
  phoneNumber_ends_with: String
  phoneNumber_not_ends_with: String
  alternateNumber: String
  alternateNumber_not: String
  alternateNumber_in: [String!]
  alternateNumber_not_in: [String!]
  alternateNumber_lt: String
  alternateNumber_lte: String
  alternateNumber_gt: String
  alternateNumber_gte: String
  alternateNumber_contains: String
  alternateNumber_not_contains: String
  alternateNumber_starts_with: String
  alternateNumber_not_starts_with: String
  alternateNumber_ends_with: String
  alternateNumber_not_ends_with: String
  DOB: DateTime
  DOB_not: DateTime
  DOB_in: [DateTime!]
  DOB_not_in: [DateTime!]
  DOB_lt: DateTime
  DOB_lte: DateTime
  DOB_gt: DateTime
  DOB_gte: DateTime
  package_every: PackageWhereInput
  package_some: PackageWhereInput
  package_none: PackageWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  recommanded_every: MemberWhereInput
  recommanded_some: MemberWhereInput
  recommanded_none: MemberWhereInput
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  status: Status
  status_not: Status
  status_in: [Status!]
  status_not_in: [Status!]
  AND: [MemberWhereInput!]
  OR: [MemberWhereInput!]
  NOT: [MemberWhereInput!]
}

input MemberWhereUniqueInput {
  id: ID
  email: String
}

type Mutation {
  createMember(data: MemberCreateInput!): Member!
  updateMember(data: MemberUpdateInput!, where: MemberWhereUniqueInput!): Member
  updateManyMembers(data: MemberUpdateManyMutationInput!, where: MemberWhereInput): BatchPayload!
  upsertMember(where: MemberWhereUniqueInput!, create: MemberCreateInput!, update: MemberUpdateInput!): Member!
  deleteMember(where: MemberWhereUniqueInput!): Member
  deleteManyMembers(where: MemberWhereInput): BatchPayload!
  createNotification(data: NotificationCreateInput!): Notification!
  updateNotification(data: NotificationUpdateInput!, where: NotificationWhereUniqueInput!): Notification
  updateManyNotifications(data: NotificationUpdateManyMutationInput!, where: NotificationWhereInput): BatchPayload!
  upsertNotification(where: NotificationWhereUniqueInput!, create: NotificationCreateInput!, update: NotificationUpdateInput!): Notification!
  deleteNotification(where: NotificationWhereUniqueInput!): Notification
  deleteManyNotifications(where: NotificationWhereInput): BatchPayload!
  createPackage(data: PackageCreateInput!): Package!
  updatePackage(data: PackageUpdateInput!, where: PackageWhereUniqueInput!): Package
  updateManyPackages(data: PackageUpdateManyMutationInput!, where: PackageWhereInput): BatchPayload!
  upsertPackage(where: PackageWhereUniqueInput!, create: PackageCreateInput!, update: PackageUpdateInput!): Package!
  deletePackage(where: PackageWhereUniqueInput!): Package
  deleteManyPackages(where: PackageWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type Notification {
  id: ID!
  typeofOperation: String!
  category: String!
  owner: User!
  impactedId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type NotificationConnection {
  pageInfo: PageInfo!
  edges: [NotificationEdge]!
  aggregate: AggregateNotification!
}

input NotificationCreateInput {
  id: ID
  typeofOperation: String!
  category: String!
  owner: UserCreateOneWithoutNotificationInput!
  impactedId: String!
}

input NotificationCreateManyWithoutOwnerInput {
  create: [NotificationCreateWithoutOwnerInput!]
  connect: [NotificationWhereUniqueInput!]
}

input NotificationCreateWithoutOwnerInput {
  id: ID
  typeofOperation: String!
  category: String!
  impactedId: String!
}

type NotificationEdge {
  node: Notification!
  cursor: String!
}

enum NotificationOrderByInput {
  id_ASC
  id_DESC
  typeofOperation_ASC
  typeofOperation_DESC
  category_ASC
  category_DESC
  impactedId_ASC
  impactedId_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type NotificationPreviousValues {
  id: ID!
  typeofOperation: String!
  category: String!
  impactedId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input NotificationScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  typeofOperation: String
  typeofOperation_not: String
  typeofOperation_in: [String!]
  typeofOperation_not_in: [String!]
  typeofOperation_lt: String
  typeofOperation_lte: String
  typeofOperation_gt: String
  typeofOperation_gte: String
  typeofOperation_contains: String
  typeofOperation_not_contains: String
  typeofOperation_starts_with: String
  typeofOperation_not_starts_with: String
  typeofOperation_ends_with: String
  typeofOperation_not_ends_with: String
  category: String
  category_not: String
  category_in: [String!]
  category_not_in: [String!]
  category_lt: String
  category_lte: String
  category_gt: String
  category_gte: String
  category_contains: String
  category_not_contains: String
  category_starts_with: String
  category_not_starts_with: String
  category_ends_with: String
  category_not_ends_with: String
  impactedId: String
  impactedId_not: String
  impactedId_in: [String!]
  impactedId_not_in: [String!]
  impactedId_lt: String
  impactedId_lte: String
  impactedId_gt: String
  impactedId_gte: String
  impactedId_contains: String
  impactedId_not_contains: String
  impactedId_starts_with: String
  impactedId_not_starts_with: String
  impactedId_ends_with: String
  impactedId_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [NotificationScalarWhereInput!]
  OR: [NotificationScalarWhereInput!]
  NOT: [NotificationScalarWhereInput!]
}

type NotificationSubscriptionPayload {
  mutation: MutationType!
  node: Notification
  updatedFields: [String!]
  previousValues: NotificationPreviousValues
}

input NotificationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: NotificationWhereInput
  AND: [NotificationSubscriptionWhereInput!]
  OR: [NotificationSubscriptionWhereInput!]
  NOT: [NotificationSubscriptionWhereInput!]
}

input NotificationUpdateInput {
  typeofOperation: String
  category: String
  owner: UserUpdateOneRequiredWithoutNotificationInput
  impactedId: String
}

input NotificationUpdateManyDataInput {
  typeofOperation: String
  category: String
  impactedId: String
}

input NotificationUpdateManyMutationInput {
  typeofOperation: String
  category: String
  impactedId: String
}

input NotificationUpdateManyWithoutOwnerInput {
  create: [NotificationCreateWithoutOwnerInput!]
  delete: [NotificationWhereUniqueInput!]
  connect: [NotificationWhereUniqueInput!]
  set: [NotificationWhereUniqueInput!]
  disconnect: [NotificationWhereUniqueInput!]
  update: [NotificationUpdateWithWhereUniqueWithoutOwnerInput!]
  upsert: [NotificationUpsertWithWhereUniqueWithoutOwnerInput!]
  deleteMany: [NotificationScalarWhereInput!]
  updateMany: [NotificationUpdateManyWithWhereNestedInput!]
}

input NotificationUpdateManyWithWhereNestedInput {
  where: NotificationScalarWhereInput!
  data: NotificationUpdateManyDataInput!
}

input NotificationUpdateWithoutOwnerDataInput {
  typeofOperation: String
  category: String
  impactedId: String
}

input NotificationUpdateWithWhereUniqueWithoutOwnerInput {
  where: NotificationWhereUniqueInput!
  data: NotificationUpdateWithoutOwnerDataInput!
}

input NotificationUpsertWithWhereUniqueWithoutOwnerInput {
  where: NotificationWhereUniqueInput!
  update: NotificationUpdateWithoutOwnerDataInput!
  create: NotificationCreateWithoutOwnerInput!
}

input NotificationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  typeofOperation: String
  typeofOperation_not: String
  typeofOperation_in: [String!]
  typeofOperation_not_in: [String!]
  typeofOperation_lt: String
  typeofOperation_lte: String
  typeofOperation_gt: String
  typeofOperation_gte: String
  typeofOperation_contains: String
  typeofOperation_not_contains: String
  typeofOperation_starts_with: String
  typeofOperation_not_starts_with: String
  typeofOperation_ends_with: String
  typeofOperation_not_ends_with: String
  category: String
  category_not: String
  category_in: [String!]
  category_not_in: [String!]
  category_lt: String
  category_lte: String
  category_gt: String
  category_gte: String
  category_contains: String
  category_not_contains: String
  category_starts_with: String
  category_not_starts_with: String
  category_ends_with: String
  category_not_ends_with: String
  owner: UserWhereInput
  impactedId: String
  impactedId_not: String
  impactedId_in: [String!]
  impactedId_not_in: [String!]
  impactedId_lt: String
  impactedId_lte: String
  impactedId_gt: String
  impactedId_gte: String
  impactedId_contains: String
  impactedId_not_contains: String
  impactedId_starts_with: String
  impactedId_not_starts_with: String
  impactedId_ends_with: String
  impactedId_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [NotificationWhereInput!]
  OR: [NotificationWhereInput!]
  NOT: [NotificationWhereInput!]
}

input NotificationWhereUniqueInput {
  id: ID
}

type Package {
  id: ID!
  name: String!
  memberShipId: Member
  startDate: DateTime
  endDate: DateTime
  fees: String!
}

type PackageConnection {
  pageInfo: PageInfo!
  edges: [PackageEdge]!
  aggregate: AggregatePackage!
}

input PackageCreateInput {
  id: ID
  name: String!
  memberShipId: MemberCreateOneWithoutPackageInput
  startDate: DateTime
  endDate: DateTime
  fees: String!
}

input PackageCreateManyWithoutMemberShipIdInput {
  create: [PackageCreateWithoutMemberShipIdInput!]
  connect: [PackageWhereUniqueInput!]
}

input PackageCreateWithoutMemberShipIdInput {
  id: ID
  name: String!
  startDate: DateTime
  endDate: DateTime
  fees: String!
}

type PackageEdge {
  node: Package!
  cursor: String!
}

enum PackageOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  startDate_ASC
  startDate_DESC
  endDate_ASC
  endDate_DESC
  fees_ASC
  fees_DESC
}

type PackagePreviousValues {
  id: ID!
  name: String!
  startDate: DateTime
  endDate: DateTime
  fees: String!
}

input PackageScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  startDate: DateTime
  startDate_not: DateTime
  startDate_in: [DateTime!]
  startDate_not_in: [DateTime!]
  startDate_lt: DateTime
  startDate_lte: DateTime
  startDate_gt: DateTime
  startDate_gte: DateTime
  endDate: DateTime
  endDate_not: DateTime
  endDate_in: [DateTime!]
  endDate_not_in: [DateTime!]
  endDate_lt: DateTime
  endDate_lte: DateTime
  endDate_gt: DateTime
  endDate_gte: DateTime
  fees: String
  fees_not: String
  fees_in: [String!]
  fees_not_in: [String!]
  fees_lt: String
  fees_lte: String
  fees_gt: String
  fees_gte: String
  fees_contains: String
  fees_not_contains: String
  fees_starts_with: String
  fees_not_starts_with: String
  fees_ends_with: String
  fees_not_ends_with: String
  AND: [PackageScalarWhereInput!]
  OR: [PackageScalarWhereInput!]
  NOT: [PackageScalarWhereInput!]
}

type PackageSubscriptionPayload {
  mutation: MutationType!
  node: Package
  updatedFields: [String!]
  previousValues: PackagePreviousValues
}

input PackageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PackageWhereInput
  AND: [PackageSubscriptionWhereInput!]
  OR: [PackageSubscriptionWhereInput!]
  NOT: [PackageSubscriptionWhereInput!]
}

input PackageUpdateInput {
  name: String
  memberShipId: MemberUpdateOneWithoutPackageInput
  startDate: DateTime
  endDate: DateTime
  fees: String
}

input PackageUpdateManyDataInput {
  name: String
  startDate: DateTime
  endDate: DateTime
  fees: String
}

input PackageUpdateManyMutationInput {
  name: String
  startDate: DateTime
  endDate: DateTime
  fees: String
}

input PackageUpdateManyWithoutMemberShipIdInput {
  create: [PackageCreateWithoutMemberShipIdInput!]
  delete: [PackageWhereUniqueInput!]
  connect: [PackageWhereUniqueInput!]
  set: [PackageWhereUniqueInput!]
  disconnect: [PackageWhereUniqueInput!]
  update: [PackageUpdateWithWhereUniqueWithoutMemberShipIdInput!]
  upsert: [PackageUpsertWithWhereUniqueWithoutMemberShipIdInput!]
  deleteMany: [PackageScalarWhereInput!]
  updateMany: [PackageUpdateManyWithWhereNestedInput!]
}

input PackageUpdateManyWithWhereNestedInput {
  where: PackageScalarWhereInput!
  data: PackageUpdateManyDataInput!
}

input PackageUpdateWithoutMemberShipIdDataInput {
  name: String
  startDate: DateTime
  endDate: DateTime
  fees: String
}

input PackageUpdateWithWhereUniqueWithoutMemberShipIdInput {
  where: PackageWhereUniqueInput!
  data: PackageUpdateWithoutMemberShipIdDataInput!
}

input PackageUpsertWithWhereUniqueWithoutMemberShipIdInput {
  where: PackageWhereUniqueInput!
  update: PackageUpdateWithoutMemberShipIdDataInput!
  create: PackageCreateWithoutMemberShipIdInput!
}

input PackageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  memberShipId: MemberWhereInput
  startDate: DateTime
  startDate_not: DateTime
  startDate_in: [DateTime!]
  startDate_not_in: [DateTime!]
  startDate_lt: DateTime
  startDate_lte: DateTime
  startDate_gt: DateTime
  startDate_gte: DateTime
  endDate: DateTime
  endDate_not: DateTime
  endDate_in: [DateTime!]
  endDate_not_in: [DateTime!]
  endDate_lt: DateTime
  endDate_lte: DateTime
  endDate_gt: DateTime
  endDate_gte: DateTime
  fees: String
  fees_not: String
  fees_in: [String!]
  fees_not_in: [String!]
  fees_lt: String
  fees_lte: String
  fees_gt: String
  fees_gte: String
  fees_contains: String
  fees_not_contains: String
  fees_starts_with: String
  fees_not_starts_with: String
  fees_ends_with: String
  fees_not_ends_with: String
  AND: [PackageWhereInput!]
  OR: [PackageWhereInput!]
  NOT: [PackageWhereInput!]
}

input PackageWhereUniqueInput {
  id: ID
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  member(where: MemberWhereUniqueInput!): Member
  members(where: MemberWhereInput, orderBy: MemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Member]!
  membersConnection(where: MemberWhereInput, orderBy: MemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MemberConnection!
  notification(where: NotificationWhereUniqueInput!): Notification
  notifications(where: NotificationWhereInput, orderBy: NotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Notification]!
  notificationsConnection(where: NotificationWhereInput, orderBy: NotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NotificationConnection!
  package(where: PackageWhereUniqueInput!): Package
  packages(where: PackageWhereInput, orderBy: PackageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Package]!
  packagesConnection(where: PackageWhereInput, orderBy: PackageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PackageConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

enum Status {
  ACTIVE
  DEACTIVE
  DANGER
}

type Subscription {
  member(where: MemberSubscriptionWhereInput): MemberSubscriptionPayload
  notification(where: NotificationSubscriptionWhereInput): NotificationSubscriptionPayload
  package(where: PackageSubscriptionWhereInput): PackageSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  username: String!
  password: String!
  email: String!
  notification(where: NotificationWhereInput, orderBy: NotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Notification!]
  readNotificationCount: String
  createdAt: DateTime
  updatedAt: DateTime
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  username: String!
  password: String!
  email: String!
  notification: NotificationCreateManyWithoutOwnerInput
  readNotificationCount: String
}

input UserCreateOneWithoutNotificationInput {
  create: UserCreateWithoutNotificationInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutNotificationInput {
  id: ID
  username: String!
  password: String!
  email: String!
  readNotificationCount: String
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  username_ASC
  username_DESC
  password_ASC
  password_DESC
  email_ASC
  email_DESC
  readNotificationCount_ASC
  readNotificationCount_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  username: String!
  password: String!
  email: String!
  readNotificationCount: String
  createdAt: DateTime
  updatedAt: DateTime
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  username: String
  password: String
  email: String
  notification: NotificationUpdateManyWithoutOwnerInput
  readNotificationCount: String
}

input UserUpdateManyMutationInput {
  username: String
  password: String
  email: String
  readNotificationCount: String
}

input UserUpdateOneRequiredWithoutNotificationInput {
  create: UserCreateWithoutNotificationInput
  update: UserUpdateWithoutNotificationDataInput
  upsert: UserUpsertWithoutNotificationInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutNotificationDataInput {
  username: String
  password: String
  email: String
  readNotificationCount: String
}

input UserUpsertWithoutNotificationInput {
  update: UserUpdateWithoutNotificationDataInput!
  create: UserCreateWithoutNotificationInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  notification_every: NotificationWhereInput
  notification_some: NotificationWhereInput
  notification_none: NotificationWhereInput
  readNotificationCount: String
  readNotificationCount_not: String
  readNotificationCount_in: [String!]
  readNotificationCount_not_in: [String!]
  readNotificationCount_lt: String
  readNotificationCount_lte: String
  readNotificationCount_gt: String
  readNotificationCount_gte: String
  readNotificationCount_contains: String
  readNotificationCount_not_contains: String
  readNotificationCount_starts_with: String
  readNotificationCount_not_starts_with: String
  readNotificationCount_ends_with: String
  readNotificationCount_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    